// Data Storage
let items = JSON.parse(localStorage.getItem('rentalItems')) || [];
let rentals = JSON.parse(localStorage.getItem('rentalRentals')) || [];
let returns = JSON.parse(localStorage.getItem('rentalReturns')) || [];
let categories = JSON.parse(localStorage.getItem('rentalCategories')) || [
    { id: 1, name: 'Elektronik', description: 'Perangkat elektronik dan gadget' },
    { id: 2, name: 'Furniture', description: 'Meja, kursi, dan furniture lainnya' },
    { id: 3, name: 'Alat', description: 'Alat konstruksi dan perbaikan' },
    { id: 4, name: 'Kendaraan', description: 'Mobil, motor, dan sepeda' }
];

// Current editing states
let editingItem = null;
let editingCategory = null;
let currentRental = null;
let currentReturnRental = null;
let cameraStream = null;

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    // Save initial categories if not exists
    if (!localStorage.getItem('rentalCategories')) {
        saveCategories();
    }
    
    // Setup event listeners
    setupEventListeners();
    
    // Show login screen
    showLoginScreen();
}

function setupEventListeners() {
    // Login form
    document.getElementById('loginForm').addEventListener('submit', handleLogin);
    
    // Navigation
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', (e) => {
            const section = e.target.dataset.section;
            showSection(section);
        });
    });
    
    // Logout
    document.getElementById('logoutBtn').addEventListener('click', logout);
    
    // Mobile menu toggle
    document.querySelector('.mobile-menu-toggle').addEventListener('click', toggleMobileMenu);
    
    // Forms
    document.getElementById('categoryForm').addEventListener('submit', handleCategorySubmit);
    document.getElementById('itemForm').addEventListener('submit', handleItemSubmit);
    document.getElementById('rentalForm').addEventListener('submit', handleRentalSubmit);
    document.getElementById('returnForm').addEventListener('submit', handleReturnSubmit);
    
    // Search and filters
    document.getElementById('itemSearch').addEventListener('input', filterItems);
    document.getElementById('categoryFilter').addEventListener('change', filterItems);
    document.getElementById('conditionFilter').addEventListener('change', filterItems);
    document.getElementById('rentalSearch').addEventListener('input', filterRentals);
    document.getElementById('statusFilter').addEventListener('change', filterRentals);
    
    // Rental form calculations
    document.getElementById('rentalItem').addEventListener('change', updateRateOptions);
    document.getElementById('selectedRate').addEventListener('change', calculateRentalCost);
    document.getElementById('duration').addEventListener('input', calculateRentalCost);
    
    // Return form calculations
    document.getElementById('discountPercent').addEventListener('input', calculateFinalCost);
    document.getElementById('returnItemCode').addEventListener('input', findRentalByCode);
    
    // Modal close events
    window.addEventListener('click', (e) => {
        if (e.target.classList.contains('modal')) {
            closeAllModals();
        }
    });
}

// Authentication
function handleLogin(e) {
    e.preventDefault();
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    if (username === 'admin' && password === 'admin123') {
        showMainApp();
    } else {
        alert('Kredensial tidak valid. Gunakan username: admin, password: admin123');
    }
}

function showLoginScreen() {
    document.getElementById('loginScreen').classList.remove('hidden');
    document.getElementById('mainApp').classList.add('hidden');
}

function showMainApp() {
    document.getElementById('loginScreen').classList.add('hidden');
    document.getElementById('mainApp').classList.remove('hidden');
    showSection('dashboard');
    loadAllData();
}

function logout() {
    showLoginScreen();
    document.getElementById('loginForm').reset();
}

// Navigation
function showSection(sectionName) {
    // Hide all sections
    document.querySelectorAll('.section').forEach(section => {
        section.classList.remove('active');
    });
    
    // Remove active class from nav items
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    // Show selected section
    document.getElementById(sectionName).classList.add('active');
    
    // Add active class to nav item
    document.querySelector(`[data-section="${sectionName}"]`).classList.add('active');
    
    // Load section-specific data
    switch(sectionName) {
        case 'dashboard':
            loadDashboard();
            break;
        case 'items':
            loadItems();
            break;
        case 'rentals':
            loadRentals();
            break;
        case 'returns':
            loadReturns();
            break;
        case 'reports':
            loadReports();
            break;
    }
}

function toggleMobileMenu() {
    const navMenu = document.querySelector('.nav-menu');
    navMenu.style.display = navMenu.style.display === 'flex' ? 'none' : 'flex';
}

// Data Management
function saveItems() {
    localStorage.setItem('rentalItems', JSON.stringify(items));
}

function saveRentals() {
    localStorage.setItem('rentalRentals', JSON.stringify(rentals));
}

function saveReturns() {
    localStorage.setItem('rentalReturns', JSON.stringify(returns));
}

function saveCategories() {
    localStorage.setItem('rentalCategories', JSON.stringify(categories));
}

function loadAllData() {
    loadDashboard();
    populateCategorySelects();
    populateItemSelects();
}

// Dashboard
function loadDashboard() {
    updateKPIs();
    loadCategories();
    loadPopularItems();
}

function updateKPIs() {
    // Calculate total revenue
    const totalRevenue = returns.reduce((sum, ret) => sum + ret.finalCost, 0);
    document.getElementById('totalRevenue').textContent = formatCurrency(totalRevenue);
    
    // Count active rentals
    const activeRentals = rentals.filter(rental => rental.status === 'Aktif').length;
    document.getElementById('activeRentals').textContent = activeRentals;
    
    // Count available items
    const availableItems = items.filter(item => item.status === 'Tersedia').length;
    document.getElementById('availableItems').textContent = availableItems;
    
    // Count categories
    document.getElementById('totalCategories').textContent = categories.length;
}

function loadCategories() {
    const container = document.getElementById('categoriesList');
    container.innerHTML = '';
    
    categories.forEach(category => {
        const categoryCard = document.createElement('div');
        categoryCard.className = 'category-card';
        categoryCard.innerHTML = `
            <div class="category-actions">
                <button class="edit-category-btn" onclick="editCategory(${category.id})">‚úèÔ∏è</button>
                <button class="delete-category-btn" onclick="deleteCategory(${category.id})">üóëÔ∏è</button>
            </div>
            <h4>${category.name}</h4>
            <p>${category.description}</p>
        `;
        container.appendChild(categoryCard);
    });
}

function loadPopularItems() {
    const tbody = document.querySelector('#popularItemsTable tbody');
    tbody.innerHTML = '';
    
    // Calculate item popularity based on rental count
    const itemStats = items.map(item => {
        const itemRentals = rentals.filter(rental => rental.itemId === item.id);
        const itemReturns = returns.filter(ret => itemRentals.some(rental => rental.id === ret.rentalId));
        const revenue = itemReturns.reduce((sum, ret) => sum + ret.finalCost, 0);
        
        return {
            ...item,
            rentalCount: itemRentals.length,
            revenue: revenue
        };
    }).sort((a, b) => b.rentalCount - a.rentalCount).slice(0, 10);
    
    itemStats.forEach(item => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${item.name}</td>
            <td>${getCategoryName(item.categoryId)}</td>
            <td>${item.rentalCount}</td>
            <td>${formatCurrency(item.revenue)}</td>
            <td>
                <button class="action-btn edit-action-btn" onclick="editItem(${item.id})">Edit</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// Categories Management
function showCategoryModal(categoryId = null) {
    editingCategory = categoryId;
    const modal = document.getElementById('categoryModal');
    const title = document.getElementById('categoryModalTitle');
    const form = document.getElementById('categoryForm');
    
    if (categoryId) {
        const category = categories.find(c => c.id === categoryId);
        title.textContent = 'Edit Kategori';
        document.getElementById('categoryName').value = category.name;
        document.getElementById('categoryDescription').value = category.description;
    } else {
        title.textContent = 'Tambah Kategori';
        form.reset();
    }
    
    modal.style.display = 'block';
}

function closeCategoryModal() {
    document.getElementById('categoryModal').style.display = 'none';
    editingCategory = null;
}

function handleCategorySubmit(e) {
    e.preventDefault();
    const name = document.getElementById('categoryName').value;
    const description = document.getElementById('categoryDescription').value;
    
    if (editingCategory) {
        const category = categories.find(c => c.id === editingCategory);
        category.name = name;
        category.description = description;
    } else {
        const newCategory = {
            id: Date.now(),
            name: name,
            description: description
        };
        categories.push(newCategory);
    }
    
    saveCategories();
    loadCategories();
    populateCategorySelects();
    updateKPIs();
    closeCategoryModal();
}

function editCategory(categoryId) {
    showCategoryModal(categoryId);
}

function deleteCategory(categoryId) {
    if (confirm('Apakah Anda yakin ingin menghapus kategori ini?')) {
        categories = categories.filter(c => c.id !== categoryId);
        saveCategories();
        loadCategories();
        populateCategorySelects();
        updateKPIs();
    }
}

// Items Management
function loadItems() {
    populateCategorySelects();
    displayItems(items);
}

function displayItems(itemsToShow) {
    const tbody = document.querySelector('#itemsTable tbody');
    tbody.innerHTML = '';
    
    itemsToShow.forEach(item => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                ${item.image ? `<img src="${item.image}" alt="${item.name}" class="item-image">` : 'üì¶'}
            </td>
            <td>${item.name}</td>
            <td>${item.code || 'N/A'}</td>
            <td>${getCategoryName(item.categoryId)}</td>
            <td>${item.condition}</td>
            <td>${formatCurrency(item.basePrice)}</td>
            <td>${item.location}</td>
            <td><span class="status-badge status-${item.status.toLowerCase()}">${item.status}</span></td>
            <td>
                <button class="action-btn edit-action-btn" onclick="editItem(${item.id})">Edit</button>
                <button class="action-btn delete-action-btn" onclick="deleteItem(${item.id})">Hapus</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function showItemModal(itemId = null) {
    editingItem = itemId;
    const modal = document.getElementById('itemModal');
    const title = document.getElementById('itemModalTitle');
    const form = document.getElementById('itemForm');
    
    populateCategorySelects();
    
    if (itemId) {
        const item = items.find(i => i.id === itemId);
        title.textContent = 'Edit Barang';
        document.getElementById('itemName').value = item.name;
        document.getElementById('itemCode').value = item.code || '';
        document.getElementById('itemCategory').value = item.categoryId;
        document.getElementById('itemDescription').value = item.description;
        document.getElementById('itemBasePrice').value = item.basePrice;
        document.getElementById('itemCondition').value = item.condition;
        document.getElementById('itemLocation').value = item.location;
        document.getElementById('itemFeatures').value = item.features ? item.features.join(', ') : '';
        document.getElementById('itemImage').value = item.image || '';
        
        // Load custom base rates
        loadCustomBaseRates(item.customBaseRates || []);
        // Load pricing packages
        loadPricingPackages(item.pricingPackages || []);
    } else {
        title.textContent = 'Tambah Barang';
        form.reset();
        loadCustomBaseRates([]);
        loadPricingPackages([]);
    }
    
    modal.style.display = 'block';
}

function closeItemModal() {
    document.getElementById('itemModal').style.display = 'none';
    editingItem = null;
}

function handleItemSubmit(e) {
    e.preventDefault();
    
    const name = document.getElementById('itemName').value;
    const code = document.getElementById('itemCode').value;
    const categoryId = parseInt(document.getElementById('itemCategory').value);
    const description = document.getElementById('itemDescription').value;
    const basePrice = parseFloat(document.getElementById('itemBasePrice').value);
    const condition = document.getElementById('itemCondition').value;
    const location = document.getElementById('itemLocation').value;
    const features = document.getElementById('itemFeatures').value.split(',').map(f => f.trim()).filter(f => f);
    const image = document.getElementById('itemImage').value;
    
    // Check if code already exists (for new items)
    if (!editingItem && items.some(item => item.code === code)) {
        alert('Kode/Barcode sudah digunakan. Silakan gunakan kode yang berbeda.');
        return;
    }
    
    // Get custom base rates
    const customBaseRates = [];
    document.querySelectorAll('.base-rate-item').forEach(rate => {
        const name = rate.querySelector('.rate-name').value;
        const price = parseFloat(rate.querySelector('.rate-price').value);
        const condition = rate.querySelector('.rate-condition').value;
        if (name && price && condition) {
            customBaseRates.push({ name, price, condition });
        }
    });
    
    // Get pricing packages
    const pricingPackages = [];
    document.querySelectorAll('.pricing-package').forEach(pkg => {
        const name = pkg.querySelector('.package-name').value;
        const price = parseFloat(pkg.querySelector('.package-price').value);
        if (name && price) {
            pricingPackages.push({ name, price });
        }
    });
    
    if (editingItem) {
        const item = items.find(i => i.id === editingItem);
        item.name = name;
        item.code = code;
        item.categoryId = categoryId;
        item.description = description;
        item.basePrice = basePrice;
        item.condition = condition;
        item.location = location;
        item.features = features;
        item.image = image;
        item.customBaseRates = customBaseRates;
        item.pricingPackages = pricingPackages;
    } else {
        const newItem = {
            id: Date.now(),
            name: name,
            code: code,
            categoryId: categoryId,
            description: description,
            basePrice: basePrice,
            condition: condition,
            location: location,
            features: features,
            image: image,
            status: 'Tersedia',
            customBaseRates: customBaseRates,
            pricingPackages: pricingPackages
        };
        items.push(newItem);
    }
    
    saveItems();
    loadItems();
    populateItemSelects();
    updateKPIs();
    closeItemModal();
}

function editItem(itemId) {
    showItemModal(itemId);
}

function deleteItem(itemId) {
    if (confirm('Apakah Anda yakin ingin menghapus barang ini?')) {
        items = items.filter(i => i.id !== itemId);
        saveItems();
        loadItems();
        populateItemSelects();
        updateKPIs();
    }
}

function filterItems() {
    const search = document.getElementById('itemSearch').value.toLowerCase();
    const categoryFilter = document.getElementById('categoryFilter').value;
    const conditionFilter = document.getElementById('conditionFilter').value;
    
    let filteredItems = items.filter(item => {
        const matchesSearch = item.name.toLowerCase().includes(search) || 
                            item.description.toLowerCase().includes(search) ||
                            (item.code && item.code.toLowerCase().includes(search));
        const matchesCategory = !categoryFilter || item.categoryId == categoryFilter;
        const matchesCondition = !conditionFilter || item.condition === conditionFilter;
        
        return matchesSearch && matchesCategory && matchesCondition;
    });
    
    displayItems(filteredItems);
}

// Custom Base Rates
function loadCustomBaseRates(rates) {
    const container = document.getElementById('customBaseRates');
    container.innerHTML = '';
    
    if (rates.length === 0) {
        addBaseRate();
    } else {
        rates.forEach(rate => {
            const rateDiv = document.createElement('div');
            rateDiv.className = 'base-rate-item';
            rateDiv.innerHTML = `
                <input type="text" placeholder="Nama tarif (misal: Tarif Weekend)" class="rate-name" value="${rate.name}">
                <input type="number" placeholder="Tarif per hari" class="rate-price" value="${rate.price}">
                <input type="text" placeholder="Kondisi (misal: Sabtu-Minggu)" class="rate-condition" value="${rate.condition}">
                <button type="button" onclick="removeBaseRate(this)" class="remove-btn">Hapus</button>
            `;
            container.appendChild(rateDiv);
        });
    }
}

function addBaseRate() {
    const container = document.getElementById('customBaseRates');
    const rateDiv = document.createElement('div');
    rateDiv.className = 'base-rate-item';
    rateDiv.innerHTML = `
        <input type="text" placeholder="Nama tarif (misal: Tarif Weekend)" class="rate-name">
        <input type="number" placeholder="Tarif per hari" class="rate-price">
        <input type="text" placeholder="Kondisi (misal: Sabtu-Minggu)" class="rate-condition">
        <button type="button" onclick="removeBaseRate(this)" class="remove-btn">Hapus</button>
    `;
    container.appendChild(rateDiv);
}

function removeBaseRate(button) {
    button.parentElement.remove();
}

// Pricing Packages
function loadPricingPackages(packages) {
    const container = document.getElementById('pricingPackages');
    container.innerHTML = '';
    
    if (packages.length === 0) {
        addPricingPackage();
    } else {
        packages.forEach(pkg => {
            const packageDiv = document.createElement('div');
            packageDiv.className = 'pricing-package';
            packageDiv.innerHTML = `
                <input type="text" placeholder="Nama paket (misal: 3 hari)" class="package-name" value="${pkg.name}">
                <input type="number" placeholder="Harga" class="package-price" value="${pkg.price}">
                <button type="button" onclick="removePricingPackage(this)" class="remove-btn">Hapus</button>
            `;
            container.appendChild(packageDiv);
        });
    }
}

function addPricingPackage() {
    const container = document.getElementById('pricingPackages');
    const packageDiv = document.createElement('div');
    packageDiv.className = 'pricing-package';
    packageDiv.innerHTML = `
        <input type="text" placeholder="Nama paket (misal: 3 hari)" class="package-name">
        <input type="number" placeholder="Harga" class="package-price">
        <button type="button" onclick="removePricingPackage(this)" class="remove-btn">Hapus</button>
    `;
    container.appendChild(packageDiv);
}

function removePricingPackage(button) {
    button.parentElement.remove();
}

// Rentals Management
function loadRentals() {
    populateItemSelects();
    displayRentals(rentals);
    updateRentalStatuses();
}

function displayRentals(rentalsToShow) {
    const tbody = document.querySelector('#rentalsTable tbody');
    tbody.innerHTML = '';
    
    rentalsToShow.forEach(rental => {
        const item = items.find(i => i.id === rental.itemId);
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>#${rental.id}</td>
            <td>${rental.customerName}</td>
            <td>${rental.customerPhone}</td>
            <td>${item ? item.name : 'Barang Tidak Diketahui'}</td>
            <td>${formatDate(rental.startDate)}</td>
            <td>${rental.duration} hari</td>
            <td>${formatCurrency(rental.totalCost)}</td>
            <td><span class="status-badge status-${rental.status.toLowerCase()}">${rental.status}</span></td>
            <td>
                ${rental.status === 'Aktif' ? `<button class="action-btn return-action-btn" onclick="processReturn(${rental.id})">Kembalikan</button>` : ''}
                <button class="action-btn edit-action-btn" onclick="editRental(${rental.id})">Edit</button>
                <button class="action-btn delete-action-btn" onclick="deleteRental(${rental.id})">Hapus</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function showRentalModal(rentalId = null) {
    currentRental = rentalId;
    const modal = document.getElementById('rentalModal');
    const title = document.getElementById('rentalModalTitle');
    const form = document.getElementById('rentalForm');
    
    populateItemSelects();
    
    if (rentalId) {
        const rental = rentals.find(r => r.id === rentalId);
        title.textContent = 'Edit Penyewaan';
        document.getElementById('customerName').value = rental.customerName;
        document.getElementById('customerPhone').value = rental.customerPhone;
        document.getElementById('rentalItem').value = rental.itemId;
        document.getElementById('startDate').value = rental.startDate;
        document.getElementById('duration').value = rental.duration;
        document.getElementById('totalCost').value = rental.totalCost;
        updateRateOptions();
    } else {
        title.textContent = 'Sewa Baru';
        form.reset();
        document.getElementById('startDate').value = new Date().toISOString().split('T')[0];
    }
    
    modal.style.display = 'block';
}

function closeRentalModal() {
    document.getElementById('rentalModal').style.display = 'none';
    currentRental = null;
}

function updateRateOptions() {
    const itemId = document.getElementById('rentalItem').value;
    const rateSelect = document.getElementById('selectedRate');
    
    rateSelect.innerHTML = '<option value="base">Tarif Dasar</option>';
    
    if (itemId) {
        const item = items.find(i => i.id == itemId);
        if (item && item.customBaseRates) {
            item.customBaseRates.forEach((rate, index) => {
                const option = document.createElement('option');
                option.value = `custom-${index}`;
                option.textContent = `${rate.name} - ${formatCurrency(rate.price)}/hari`;
                rateSelect.appendChild(option);
            });
        }
        
        if (item && item.pricingPackages) {
            item.pricingPackages.forEach((pkg, index) => {
                const option = document.createElement('option');
                option.value = `package-${index}`;
                option.textContent = `${pkg.name} - ${formatCurrency(pkg.price)}`;
                rateSelect.appendChild(option);
            });
        }
    }
    
    calculateRentalCost();
}

function calculateRentalCost() {
    const itemId = document.getElementById('rentalItem').value;
    const duration = parseInt(document.getElementById('duration').value) || 0;
    const selectedRate = document.getElementById('selectedRate').value;
    
    if (itemId && duration > 0) {
        const item = items.find(i => i.id == itemId);
        if (item) {
            let cost = 0;
            
            if (selectedRate === 'base') {
                cost = item.basePrice * duration;
            } else if (selectedRate.startsWith('custom-')) {
                const rateIndex = parseInt(selectedRate.split('-')[1]);
                const customRate = item.customBaseRates[rateIndex];
                cost = customRate.price * duration;
            } else if (selectedRate.startsWith('package-')) {
                const packageIndex = parseInt(selectedRate.split('-')[1]);
                const package = item.pricingPackages[packageIndex];
                cost = package.price;
            }
            
            document.getElementById('totalCost').value = cost;
        }
    }
}

function handleRentalSubmit(e) {
    e.preventDefault();
    
    const customerName = document.getElementById('customerName').value;
    const customerPhone = document.getElementById('customerPhone').value;
    const itemId = parseInt(document.getElementById('rentalItem').value);
    const startDate = document.getElementById('startDate').value;
    const duration = parseInt(document.getElementById('duration').value);
    const totalCost = parseFloat(document.getElementById('totalCost').value);
    
    if (currentRental) {
        const rental = rentals.find(r => r.id === currentRental);
        rental.customerName = customerName;
        rental.customerPhone = customerPhone;
        rental.itemId = itemId;
        rental.startDate = startDate;
        rental.duration = duration;
        rental.totalCost = totalCost;
    } else {
        const newRental = {
            id: Date.now(),
            customerName: customerName,
            customerPhone: customerPhone,
            itemId: itemId,
            startDate: startDate,
            duration: duration,
            totalCost: totalCost,
            status: 'Aktif',
            createdAt: new Date().toISOString()
        };
        rentals.push(newRental);
        
        // Update item status
        const item = items.find(i => i.id === itemId);
        if (item) {
            item.status = 'Disewa';
        }
    }
    
    saveRentals();
    saveItems();
    loadRentals();
    updateKPIs();
    closeRentalModal();
}

function editRental(rentalId) {
    showRentalModal(rentalId);
}

function deleteRental(rentalId) {
    if (confirm('Apakah Anda yakin ingin menghapus penyewaan ini?')) {
        const rental = rentals.find(r => r.id === rentalId);
        if (rental) {
            // Update item status back to available
            const item = items.find(i => i.id === rental.itemId);
            if (item) {
                item.status = 'Tersedia';
            }
        }
        
        rentals = rentals.filter(r => r.id !== rentalId);
        saveRentals();
        saveItems();
        loadRentals();
        updateKPIs();
    }
}

function filterRentals() {
    const search = document.getElementById('rentalSearch').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;
    
    let filteredRentals = rentals.filter(rental => {
        const item = items.find(i => i.id === rental.itemId);
        const matchesSearch = rental.customerName.toLowerCase().includes(search) || 
                            rental.customerPhone.includes(search) ||
                            (item && item.name.toLowerCase().includes(search));
        const matchesStatus = !statusFilter || rental.status === statusFilter;
        
        return matchesSearch && matchesStatus;
    });
    
    displayRentals(filteredRentals);
}

function updateRentalStatuses() {
    const today = new Date();
    let updated = false;
    
    rentals.forEach(rental => {
        if (rental.status === 'Aktif') {
            const startDate = new Date(rental.startDate);
            const endDate = new Date(startDate);
            endDate.setDate(startDate.getDate() + rental.duration);
            
            if (today > endDate) {
                rental.status = 'Terlambat';
                updated = true;
            }
        }
    });
    
    if (updated) {
        saveRentals();
        displayRentals(rentals);
    }
}

// Returns Management
function loadReturns() {
    displayReturns(returns);
}

function displayReturns(returnsToShow) {
    const tbody = document.querySelector('#returnsTable tbody');
    tbody.innerHTML = '';
    
    returnsToShow.forEach(returnItem => {
        const rental = rentals.find(r => r.id === returnItem.rentalId);
        const item = rental ? items.find(i => i.id === rental.itemId) : null;
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>#${returnItem.rentalId}</td>
            <td>${rental ? rental.customerName : 'Tidak Diketahui'}</td>
            <td>${item ? item.name : 'Barang Tidak Diketahui'}</td>
            <td>${formatDate(returnItem.returnDate)}</td>
            <td>${returnItem.condition}</td>
            <td>${returnItem.discountPercent}% ${returnItem.discountReason ? `(${returnItem.discountReason})` : ''}</td>
            <td>${formatCurrency(returnItem.finalCost)}</td>
            <td>
                <button class="action-btn edit-action-btn" onclick="editReturn(${returnItem.id})">Edit</button>
                <button class="action-btn delete-action-btn" onclick="deleteReturn(${returnItem.id})">Hapus</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function showReturnModal() {
    const modal = document.getElementById('returnModal');
    document.getElementById('returnForm').reset();
    document.getElementById('rentalInfo').classList.add('hidden');
    modal.style.display = 'block';
}

function closeReturnModal() {
    document.getElementById('returnModal').style.display = 'none';
    currentReturnRental = null;
}

function findRentalByCode() {
    const code = document.getElementById('returnItemCode').value.trim();
    if (!code) {
        document.getElementById('rentalInfo').classList.add('hidden');
        return;
    }
    
    // Find item by code
    const item = items.find(i => i.code && i.code.toLowerCase() === code.toLowerCase());
    if (!item) {
        alert('Barang dengan kode tersebut tidak ditemukan.');
        return;
    }
    
    // Find active rental for this item
    const rental = rentals.find(r => r.itemId === item.id && (r.status === 'Aktif' || r.status === 'Terlambat'));
    if (!rental) {
        alert('Tidak ada penyewaan aktif untuk barang ini.');
        return;
    }
    
    // Display rental info
    currentReturnRental = rental;
    document.getElementById('returnCustomerName').textContent = rental.customerName;
    document.getElementById('returnItemName').textContent = item.name;
    document.getElementById('returnStartDate').textContent = formatDate(rental.startDate);
    document.getElementById('returnDuration').textContent = `${rental.duration} hari`;
    document.getElementById('finalCost').value = rental.totalCost;
    document.getElementById('rentalInfo').classList.remove('hidden');
}

function processReturn(rentalId) {
    const rental = rentals.find(r => r.id === rentalId);
    const item = items.find(i => i.id === rental.itemId);
    
    showReturnModal();
    
    if (item && item.code) {
        document.getElementById('returnItemCode').value = item.code;
        findRentalByCode();
    }
}

function handleReturnSubmit(e) {
    e.preventDefault();
    
    if (!currentReturnRental) {
        alert('Silakan masukkan kode barang yang valid terlebih dahulu.');
        return;
    }
    
    const condition = document.getElementById('returnCondition').value;
    const discountPercent = parseFloat(document.getElementById('discountPercent').value) || 0;
    const discountReason = document.getElementById('discountReason').value;
    const finalCost = parseFloat(document.getElementById('finalCost').value);
    
    const newReturn = {
        id: Date.now(),
        rentalId: currentReturnRental.id,
        returnDate: new Date().toISOString().split('T')[0],
        condition: condition,
        discountPercent: discountPercent,
        discountReason: discountReason,
        finalCost: finalCost,
        createdAt: new Date().toISOString()
    };
    
    returns.push(newReturn);
    
    // Update rental status
    currentReturnRental.status = 'Dikembalikan';
    
    // Update item status and condition
    const item = items.find(i => i.id === currentReturnRental.itemId);
    if (item) {
        item.status = 'Tersedia';
        item.condition = condition;
    }
    
    saveReturns();
    saveRentals();
    saveItems();
    loadReturns();
    loadRentals();
    updateKPIs();
    closeReturnModal();
    
    alert('Pengembalian berhasil diproses!');
}

function calculateFinalCost() {
    if (currentReturnRental) {
        const discountPercent = parseFloat(document.getElementById('discountPercent').value) || 0;
        const finalCost = currentReturnRental.totalCost * (1 - discountPercent / 100);
        document.getElementById('finalCost').value = finalCost;
    }
}

function editReturn(returnId) {
    alert('Fitur edit pengembalian - akan diimplementasikan');
}

function deleteReturn(returnId) {
    if (confirm('Apakah Anda yakin ingin menghapus catatan pengembalian ini?')) {
        returns = returns.filter(r => r.id !== returnId);
        saveReturns();
        loadReturns();
        updateKPIs();
    }
}

// Barcode Scanner Functions
function startBarcodeScanner() {
    showBarcodeModal();
}

function showBarcodeModal() {
    document.getElementById('barcodeModal').style.display = 'block';
}

function closeBarcodeModal() {
    document.getElementById('barcodeModal').style.display = 'none';
    stopCamera();
}

function scanBarcodeForReturn() {
    showBarcodeModal();
}

function startCamera() {
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
            .then(function(stream) {
                cameraStream = stream;
                const scanner = document.getElementById('scanner');
                const video = document.createElement('video');
                video.className = 'camera-preview';
                video.srcObject = stream;
                video.autoplay = true;
                video.playsInline = true;
                
                scanner.innerHTML = '';
                scanner.appendChild(video);
                
                // Add scanner overlay
                const overlay = document.createElement('div');
                overlay.className = 'scanner-overlay';
                overlay.innerHTML = `
                    <div class="scanner-corner top-left"></div>
                    <div class="scanner-corner top-right"></div>
                    <div class="scanner-corner bottom-left"></div>
                    <div class="scanner-corner bottom-right"></div>
                `;
                scanner.appendChild(overlay);
                
                // Simulate barcode detection (in real implementation, use a barcode library)
                setTimeout(() => {
                    const simulatedBarcode = 'ITEM' + Math.floor(Math.random() * 1000);
                    alert(`Barcode terdeteksi: ${simulatedBarcode}`);
                    useBarcode(simulatedBarcode);
                }, 3000);
            })
            .catch(function(error) {
                console.error('Error accessing camera:', error);
                alert('Tidak dapat mengakses kamera. Silakan gunakan input manual.');
            });
    } else {
        alert('Browser tidak mendukung akses kamera. Silakan gunakan input manual.');
    }
}

function stopCamera() {
    if (cameraStream) {
        cameraStream.getTracks().forEach(track => track.stop());
        cameraStream = null;
    }
    
    const scanner = document.getElementById('scanner');
    scanner.innerHTML = `
        <div class="scanner-line"></div>
        <p>Arahkan kamera ke barcode</p>
    `;
}

function useManualBarcode() {
    const barcode = document.getElementById('manualBarcode').value.trim();
    if (barcode) {
        useBarcode(barcode);
    } else {
        alert('Silakan masukkan kode barcode.');
    }
}

function useBarcode(barcode) {
    // Use the barcode in return modal
    document.getElementById('returnItemCode').value = barcode;
    closeBarcodeModal();
    findRentalByCode();
}

// Reports
function loadReports() {
    generateReport();
}

function generateReport() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    
    drawRevenueChart();
    drawRentalChart();
}

function drawRevenueChart() {
    const canvas = document.getElementById('revenueChart');
    const ctx = canvas.getContext('2d');
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'Mei', 'Jun'];
    const revenues = [50000, 75000, 60000, 90000, 80000, 100000];
    
    const barWidth = 50;
    const barSpacing = 20;
    const maxRevenue = Math.max(...revenues);
    
    ctx.fillStyle = '#3B82F6';
    
    months.forEach((month, index) => {
        const barHeight = (revenues[index] / maxRevenue) * 150;
        const x = index * (barWidth + barSpacing) + 20;
        const y = 180 - barHeight;
        
        ctx.fillRect(x, y, barWidth, barHeight);
        ctx.fillStyle = '#374151';
        ctx.font = '12px Inter';
        ctx.fillText(month, x + 15, 195);
        ctx.fillStyle = '#3B82F6';
    });
}

function drawRentalChart() {
    const canvas = document.getElementById('rentalChart');
    const ctx = canvas.getContext('2d');
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    const data = [
        { label: 'Aktif', value: rentals.filter(r => r.status === 'Aktif').length, color: '#3B82F6' },
        { label: 'Dikembalikan', value: rentals.filter(r => r.status === 'Dikembalikan').length, color: '#10B981' },
        { label: 'Terlambat', value: rentals.filter(r => r.status === 'Terlambat').length, color: '#EF4444' }
    ];
    
    const total = data.reduce((sum, item) => sum + item.value, 0);
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = 80;
    
    let currentAngle = 0;
    
    data.forEach(item => {
        const sliceAngle = (item.value / total) * 2 * Math.PI;
        
        ctx.beginPath();
        ctx.moveTo(centerX, centerY);
        ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
        ctx.closePath();
        ctx.fillStyle = item.color;
        ctx.fill();
        
        currentAngle += sliceAngle;
    });
}

// Utility Functions
function populateCategorySelects() {
    const selects = ['itemCategory', 'categoryFilter'];
    
    selects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (select) {
            const currentValue = select.value;
            select.innerHTML = selectId === 'categoryFilter' ? '<option value="">Semua Kategori</option>' : '<option value="">Pilih Kategori</option>';
            
            categories.forEach(category => {
                const option = document.createElement('option');
                option.value = category.id;
                option.textContent = category.name;
                select.appendChild(option);
            });
            
            select.value = currentValue;
        }
    });
}

function populateItemSelects() {
    const select = document.getElementById('rentalItem');
    if (select) {
        const currentValue = select.value;
        select.innerHTML = '<option value="">Pilih Barang</option>';
        
        items.filter(item => item.status === 'Tersedia').forEach(item => {
            const option = document.createElement('option');
            option.value = item.id;
            option.textContent = `${item.name} - ${formatCurrency(item.basePrice)}/hari`;
            select.appendChild(option);
        });
        
        select.value = currentValue;
    }
}

function getCategoryName(categoryId) {
    const category = categories.find(c => c.id === categoryId);
    return category ? category.name : 'Tidak Diketahui';
}

function formatCurrency(amount) {
    return new Intl.NumberFormat('id-ID', {
        style: 'currency',
        currency: 'IDR',
        minimumFractionDigits: 0
    }).format(amount);
}

function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('id-ID');
}

function closeAllModals() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
    editingItem = null;
    editingCategory = null;
    currentRental = null;
    currentReturnRental = null;
    stopCamera();
}

function toggleEditMode(section) {
    alert('Mode edit diaktifkan untuk ' + section);
}
