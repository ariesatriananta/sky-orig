// Data Storage
let categories = [
    { id: 1, name: 'Elektronik', icon: '💻', description: 'Perangkat elektronik dan gadget' },
    { id: 2, name: 'Furniture', icon: '🪑', description: 'Perabotan rumah dan kantor' },
    { id: 3, name: 'Alat', icon: '🔧', description: 'Peralatan dan tools' },
    { id: 4, name: 'Kendaraan', icon: '🚗', description: 'Kendaraan bermotor' }
];

let items = [
    {
        id: 1,
        name: 'Laptop Dell XPS 13',
        code: 'LPT001',
        category: 'Elektronik',
        condition: 'Baik',
        basePrice: 150000,
        location: 'Gudang A',
        status: 'available',
        pricingOptions: [
            { type: 'hourly', name: 'Per Jam', price: 25000 },
            { type: 'daily', name: 'Per Hari', price: 150000 },
            { type: 'weekly', name: 'Per Minggu', price: 900000 },
            { type: 'monthly', name: 'Per Bulan', price: 3000000 }
        ]
    },
    {
        id: 2,
        name: 'Meja Kantor Premium',
        code: 'MJK001',
        category: 'Furniture',
        condition: 'Baru',
        basePrice: 75000,
        location: 'Gudang B',
        status: 'available',
        pricingOptions: [
            { type: 'daily', name: 'Per Hari', price: 75000 },
            { type: 'weekly', name: 'Per Minggu', price: 450000 },
            { type: 'monthly', name: 'Per Bulan', price: 1500000 }
        ]
    },
    {
        id: 3,
        name: 'Proyektor Epson',
        code: 'PRJ001',
        category: 'Elektronik',
        condition: 'Baik',
        basePrice: 100000,
        location: 'Gudang A',
        status: 'available',
        pricingOptions: [
            { type: 'hourly', name: 'Per Jam', price: 20000 },
            { type: 'daily', name: 'Per Hari', price: 100000 },
            { type: 'custom', name: 'Per Event', price: 500000 }
        ]
    }
];

let rentals = [
    {
        id: 1,
        customerId: 'John Doe',
        customerPhone: '081234567890',
        itemId: 2,
        startDate: '2025-09-01',
        duration: 7,
        pricingType: 'daily',
        totalCost: 525000,
        status: 'AKTIF',
        invoiceNumber: 'INV-001-2025'
    }
];

let returns = [
    {
        id: 1,
        rentalId: 1,
        returnDate: '2025-09-05',
        condition: 'Baik',
        discountPercentage: 0,
        finalCost: 525000
    }
];

let editingCategoryId = null;
let editingItemId = null;
let editingRentalId = null;
let editingReturnId = null;

// Initialize application
document.addEventListener('DOMContentLoaded', function() {
    loadDataFromStorage();
    setupEventListeners();
    if (localStorage.getItem('isLoggedIn') === 'true') {
        showMainApp();
    }
});

function loadDataFromStorage() {
    const storedCategories = localStorage.getItem('rentalCategories');
    const storedItems = localStorage.getItem('rentalItems');
    const storedRentals = localStorage.getItem('rentalRentals');
    const storedReturns = localStorage.getItem('rentalReturns');
    
    if (storedCategories) categories = JSON.parse(storedCategories);
    if (storedItems) items = JSON.parse(storedItems);
    if (storedRentals) rentals = JSON.parse(storedRentals);
    if (storedReturns) returns = JSON.parse(storedReturns);
}

function setupEventListeners() {
    const addCategoryForm = document.getElementById('addCategoryForm');
    const addItemForm = document.getElementById('addItemForm');
    const addRentalForm = document.getElementById('addRentalForm');
    const addReturnForm = document.getElementById('addReturnForm');
    
    if (addCategoryForm) addCategoryForm.addEventListener('submit', handleAddCategory);
    if (addItemForm) addItemForm.addEventListener('submit', handleAddItem);
    if (addRentalForm) addRentalForm.addEventListener('submit', handleAddRental);
    if (addReturnForm) addReturnForm.addEventListener('submit', handleAddReturn);
    
    // Auto-calculate rental cost
    const rentalItem = document.getElementById('rentalItem');
    const pricingOption = document.getElementById('pricingOption');
    const duration = document.getElementById('duration');
    const customPrice = document.getElementById('customPrice');
    
    if (rentalItem) rentalItem.addEventListener('change', updatePricingOptions);
    if (pricingOption) pricingOption.addEventListener('change', calculateRentalCost);
    if (duration) duration.addEventListener('input', calculateRentalCost);
    if (customPrice) customPrice.addEventListener('input', calculateRentalCost);
    
    // Auto-calculate return cost
    const returnRental = document.getElementById('returnRental');
    const discount = document.getElementById('discount');
    if (returnRental) returnRental.addEventListener('change', calculateReturnCost);
    if (discount) discount.addEventListener('input', calculateReturnCost);
}

// Authentication
function handleLogin() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;
    
    if (username === 'admin' && password === 'admin123') {
        localStorage.setItem('isLoggedIn', 'true');
        showMainApp();
    } else {
        alert('Username atau password salah!\nGunakan: admin / admin123');
    }
}

function logout() {
    localStorage.setItem('isLoggedIn', 'false');
    document.getElementById('loginScreen').style.display = 'block';
    document.getElementById('mainApp').style.display = 'none';
    document.getElementById('username').value = 'admin';
    document.getElementById('password').value = 'admin123';
}

function showMainApp() {
    document.getElementById('loginScreen').style.display = 'none';
    document.getElementById('mainApp').style.display = 'block';
    showSection('dashboard');
    updateDashboard();
}

// Navigation
function showSection(sectionName) {
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => section.style.display = 'none');
    
    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => item.classList.remove('active'));
    
    const targetSection = document.getElementById(sectionName + 'Section');
    if (targetSection) {
        targetSection.style.display = 'block';
    }
    
    const activeNavItem = Array.from(navItems).find(item => 
        item.textContent.includes(getSectionTitle(sectionName))
    );
    if (activeNavItem) {
        activeNavItem.classList.add('active');
    }
    
    switch(sectionName) {
        case 'dashboard':
            updateDashboard();
            break;
        case 'categories':
            displayCategories();
            break;
        case 'items':
            displayItems();
            break;
        case 'rentals':
            displayRentals();
            break;
        case 'returns':
            displayReturns();
            break;
    }
}

function getSectionTitle(sectionName) {
    const titles = {
        'dashboard': 'Dashboard',
        'categories': 'Kategori',
        'items': 'Barang',
        'rentals': 'Penyewaan',
        'returns': 'Pengembalian',
        'reports': 'Laporan'
    };
    return titles[sectionName] || '';
}

// Dashboard functions
function updateDashboard() {
    const stats = calculateStats();
    
    const elements = {
        totalRevenue: document.getElementById('totalRevenue'),
        activeRentals: document.getElementById('activeRentals'),
        availableItems: document.getElementById('availableItems'),
        totalCategories: document.getElementById('totalCategories'),
        warehouseItems: document.getElementById('warehouseItems'),
        rentedItems: document.getElementById('rentedItems'),
        totalProfit: document.getElementById('totalProfit')
    };
    
    if (elements.totalRevenue) elements.totalRevenue.textContent = `Rp ${stats.totalRevenue.toLocaleString()}`;
    if (elements.activeRentals) elements.activeRentals.textContent = stats.activeRentals;
    if (elements.availableItems) elements.availableItems.textContent = stats.availableItems;
    if (elements.totalCategories) elements.totalCategories.textContent = categories.length;
    if (elements.warehouseItems) elements.warehouseItems.textContent = stats.warehouseItems;
    if (elements.rentedItems) elements.rentedItems.textContent = stats.rentedItems;
    if (elements.totalProfit) elements.totalProfit.textContent = `Rp ${stats.totalProfit.toLocaleString()}`;
}

function calculateStats() {
    const activeRentals = rentals.filter(r => r.status === 'AKTIF').length;
    const totalRevenue = returns.reduce((sum, ret) => sum + ret.finalCost, 0);
    const availableItems = items.filter(item => item.status === 'available').length;
    const rentedItems = items.filter(item => item.status === 'rented').length;
    const warehouseItems = availableItems;
    const totalProfit = totalRevenue * 0.3;
    
    return {
        totalRevenue,
        activeRentals,
        availableItems,
        rentedItems,
        warehouseItems,
        totalProfit
    };
}

// Categories Management
function displayCategories() {
    const tbody = document.getElementById('categoriesTableBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    categories.forEach(category => {
        const itemCount = items.filter(item => item.category === category.name).length;
        const row = document.createElement('tr');
        
        row.innerHTML = `
            <td>${category.icon}</td>
            <td>${category.name}</td>
            <td>${category.description}</td>
            <td>${itemCount}</td>
            <td>
                <button class="btn-edit" onclick="editCategory(${category.id})">Edit</button>
                <button class="btn-delete" onclick="deleteCategory(${category.id})">Hapus</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function showAddCategoryModal() {
    editingCategoryId = null;
    const form = document.getElementById('addCategoryForm');
    if (form) form.reset();
    
    const modalTitle = document.querySelector('#addCategoryModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Tambah Kategori Baru';
    
    const modal = document.getElementById('addCategoryModal');
    if (modal) modal.style.display = 'block';
}

function editCategory(id) {
    const category = categories.find(c => c.id === id);
    if (!category) return;
    
    editingCategoryId = id;
    
    const categoryName = document.getElementById('categoryName');
    const categoryIcon = document.getElementById('categoryIcon');
    const categoryDescription = document.getElementById('categoryDescription');
    
    if (categoryName) categoryName.value = category.name;
    if (categoryIcon) categoryIcon.value = category.icon;
    if (categoryDescription) categoryDescription.value = category.description;
    
    const modalTitle = document.querySelector('#addCategoryModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Edit Kategori';
    
    const modal = document.getElementById('addCategoryModal');
    if (modal) modal.style.display = 'block';
}

function deleteCategory(id) {
    const category = categories.find(c => c.id === id);
    if (!category) return;
    
    const itemCount = items.filter(item => item.category === category.name).length;
    if (itemCount > 0) {
        alert(`Tidak dapat menghapus kategori "${category.name}" karena masih ada ${itemCount} barang yang menggunakan kategori ini.`);
        return;
    }
    
    if (confirm(`Apakah Anda yakin ingin menghapus kategori "${category.name}"?`)) {
        categories = categories.filter(c => c.id !== id);
        saveCategories();
        displayCategories();
        updateDashboard();
        showNotification('Kategori berhasil dihapus!', 'success');
    }
}

function handleAddCategory(e) {
    e.preventDefault();
    
    const categoryName = document.getElementById('categoryName');
    const categoryIcon = document.getElementById('categoryIcon');
    const categoryDescription = document.getElementById('categoryDescription');
    
    if (!categoryName || !categoryIcon || !categoryDescription) {
        alert('Form elements not found!');
        return;
    }
    
    const formData = {
        name: categoryName.value,
        icon: categoryIcon.value,
        description: categoryDescription.value
    };
    
    if (editingCategoryId) {
        const categoryIndex = categories.findIndex(c => c.id === editingCategoryId);
        if (categoryIndex !== -1) {
            const oldName = categories[categoryIndex].name;
            categories[categoryIndex] = { ...categories[categoryIndex], ...formData };
            
            // Update items that use this category
            items.forEach(item => {
                if (item.category === oldName) {
                    item.category = formData.name;
                }
            });
            
            showNotification('Kategori berhasil diperbarui!', 'success');
        }
    } else {
        const newCategory = {
            id: Date.now(),
            ...formData
        };
        categories.push(newCategory);
        showNotification('Kategori berhasil ditambahkan!', 'success');
    }
    
    saveCategories();
    saveItems();
    displayCategories();
    updateDashboard();
    closeModal('addCategoryModal');
}

// Items Management
function displayItems() {
    const tbody = document.getElementById('itemsTableBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    items.forEach(item => {
        const category = categories.find(c => c.name === item.category);
        const categoryIcon = category ? category.icon : '📦';
        const statusClass = item.status === 'available' ? 'available' : 'rented';
        const statusText = item.status === 'available' ? 'Tersedia' : 'Disewa';
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${categoryIcon}</td>
            <td>${item.name}</td>
            <td>${item.code}</td>
            <td>${item.category}</td>
            <td>${item.condition}</td>
            <td>Rp ${item.basePrice.toLocaleString()}</td>
            <td>${item.location}</td>
            <td><span class="status-badge ${statusClass}">${statusText}</span></td>
            <td>
                <button class="btn-edit" onclick="editItem(${item.id})">Edit</button>
                <button class="btn-delete" onclick="deleteItem(${item.id})">Hapus</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function showAddItemModal() {
    editingItemId = null;
    const form = document.getElementById('addItemForm');
    if (form) form.reset();
    
    populateItemCategories();
    resetPricingOptions();
    
    const modalTitle = document.querySelector('#addItemModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Tambah Barang Baru';
    
    const modal = document.getElementById('addItemModal');
    if (modal) modal.style.display = 'block';
}

function populateItemCategories() {
    const select = document.getElementById('itemCategory');
    if (!select) return;
    
    select.innerHTML = '<option value="">Pilih Kategori</option>';
    categories.forEach(category => {
        const option = document.createElement('option');
        option.value = category.name;
        option.textContent = `${category.icon} ${category.name}`;
        select.appendChild(option);
    });
}

function resetPricingOptions() {
    const container = document.getElementById('pricingOptions');
    if (!container) return;
    
    container.innerHTML = `
        <div class="pricing-option">
            <div class="form-row">
                <div class="form-group">
                    <label>Jenis Sewa</label>
                    <select class="pricing-type">
                        <option value="hourly">Per Jam</option>
                        <option value="daily" selected>Per Hari</option>
                        <option value="weekly">Per Minggu</option>
                        <option value="monthly">Per Bulan</option>
                        <option value="custom">Custom</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Nama Custom (jika custom)</label>
                    <input type="text" class="pricing-custom-name" placeholder="Contoh: Per Event">
                </div>
                <div class="form-group">
                    <label>Harga</label>
                    <input type="number" class="pricing-price" required>
                </div>
                <div class="form-group">
                    <button type="button" class="btn-remove" onclick="removePricingOption(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    `;
}

function addPricingOption() {
    const container = document.getElementById('pricingOptions');
    if (!container) return;
    
    const newOption = document.createElement('div');
    newOption.className = 'pricing-option';
    newOption.innerHTML = `
        <div class="form-row">
            <div class="form-group">
                <label>Jenis Sewa</label>
                <select class="pricing-type">
                    <option value="hourly">Per Jam</option>
                    <option value="daily">Per Hari</option>
                    <option value="weekly">Per Minggu</option>
                    <option value="monthly">Per Bulan</option>
                    <option value="custom">Custom</option>
                </select>
            </div>
            <div class="form-group">
                <label>Nama Custom (jika custom)</label>
                <input type="text" class="pricing-custom-name" placeholder="Contoh: Per Event">
            </div>
            <div class="form-group">
                <label>Harga</label>
                <input type="number" class="pricing-price" required>
            </div>
            <div class="form-group">
                <button type="button" class="btn-remove" onclick="removePricingOption(this)">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `;
    container.appendChild(newOption);
}

function removePricingOption(button) {
    const container = document.getElementById('pricingOptions');
    if (container.children.length > 1) {
        button.closest('.pricing-option').remove();
    } else {
        alert('Minimal harus ada satu opsi harga!');
    }
}

function editItem(id) {
    const item = items.find(i => i.id === id);
    if (!item) return;
    
    editingItemId = id;
    
    const itemName = document.getElementById('itemName');
    const itemCode = document.getElementById('itemCode');
    const itemCategory = document.getElementById('itemCategory');
    const itemCondition = document.getElementById('itemCondition');
    const itemPrice = document.getElementById('itemPrice');
    const itemLocation = document.getElementById('itemLocation');
    
    if (itemName) itemName.value = item.name;
    if (itemCode) itemCode.value = item.code;
    if (itemPrice) itemPrice.value = item.basePrice;
    if (itemLocation) itemLocation.value = item.location;
    
    populateItemCategories();
    if (itemCategory) itemCategory.value = item.category;
    if (itemCondition) itemCondition.value = item.condition;
    
    // Populate pricing options
    const container = document.getElementById('pricingOptions');
    if (container && item.pricingOptions) {
        container.innerHTML = '';
        item.pricingOptions.forEach(option => {
            const optionDiv = document.createElement('div');
            optionDiv.className = 'pricing-option';
            optionDiv.innerHTML = `
                <div class="form-row">
                    <div class="form-group">
                        <label>Jenis Sewa</label>
                        <select class="pricing-type">
                            <option value="hourly" ${option.type === 'hourly' ? 'selected' : ''}>Per Jam</option>
                            <option value="daily" ${option.type === 'daily' ? 'selected' : ''}>Per Hari</option>
                            <option value="weekly" ${option.type === 'weekly' ? 'selected' : ''}>Per Minggu</option>
                            <option value="monthly" ${option.type === 'monthly' ? 'selected' : ''}>Per Bulan</option>
                            <option value="custom" ${option.type === 'custom' ? 'selected' : ''}>Custom</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Nama Custom (jika custom)</label>
                        <input type="text" class="pricing-custom-name" placeholder="Contoh: Per Event" value="${option.name || ''}">
                    </div>
                    <div class="form-group">
                        <label>Harga</label>
                        <input type="number" class="pricing-price" required value="${option.price}">
                    </div>
                    <div class="form-group">
                        <button type="button" class="btn-remove" onclick="removePricingOption(this)">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(optionDiv);
        });
    }
    
    const modalTitle = document.querySelector('#addItemModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Edit Barang';
    
    const modal = document.getElementById('addItemModal');
    if (modal) modal.style.display = 'block';
}

function deleteItem(id) {
    if (confirm('Apakah Anda yakin ingin menghapus barang ini?')) {
        items = items.filter(item => item.id !== id);
        saveItems();
        displayItems();
        updateDashboard();
        showNotification('Barang berhasil dihapus!', 'success');
    }
}

function handleAddItem(e) {
    e.preventDefault();
    
    const itemName = document.getElementById('itemName');
    const itemCode = document.getElementById('itemCode');
    const itemCategory = document.getElementById('itemCategory');
    const itemCondition = document.getElementById('itemCondition');
    const itemPrice = document.getElementById('itemPrice');
    const itemLocation = document.getElementById('itemLocation');
    
    if (!itemName || !itemCode || !itemCategory || !itemCondition || !itemPrice || !itemLocation) {
        alert('Form elements not found!');
        return;
    }
    
    // Collect pricing options
    const pricingOptions = [];
    const pricingOptionElements = document.querySelectorAll('.pricing-option');
    
    pricingOptionElements.forEach(optionElement => {
        const type = optionElement.querySelector('.pricing-type').value;
        const customName = optionElement.querySelector('.pricing-custom-name').value;
        const price = parseInt(optionElement.querySelector('.pricing-price').value);
        
        let name;
        switch(type) {
            case 'hourly': name = 'Per Jam'; break;
            case 'daily': name = 'Per Hari'; break;
            case 'weekly': name = 'Per Minggu'; break;
            case 'monthly': name = 'Per Bulan'; break;
            case 'custom': name = customName || 'Custom'; break;
            default: name = 'Per Hari';
        }
        
        pricingOptions.push({ type, name, price });
    });
    
    const formData = {
        name: itemName.value,
        code: itemCode.value,
        category: itemCategory.value,
        condition: itemCondition.value,
        basePrice: parseInt(itemPrice.value),
        location: itemLocation.value,
        status: 'available',
        pricingOptions: pricingOptions
    };
    
    if (editingItemId) {
        const itemIndex = items.findIndex(i => i.id === editingItemId);
        if (itemIndex !== -1) {
            items[itemIndex] = { ...items[itemIndex], ...formData };
            showNotification('Barang berhasil diperbarui!', 'success');
        }
    } else {
        const newItem = {
            id: Date.now(),
            ...formData
        };
        items.push(newItem);
        showNotification('Barang berhasil ditambahkan!', 'success');
    }
    
    saveItems();
    displayItems();
    updateDashboard();
    closeModal('addItemModal');
}

// Rentals Management
function displayRentals() {
    const tbody = document.getElementById('rentalsTableBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    rentals.forEach(rental => {
        const item = items.find(i => i.id === rental.itemId);
        const row = document.createElement('tr');
        
        row.innerHTML = `
            <td>#${rental.id}</td>
            <td>${rental.customerId}</td>
            <td>${rental.customerPhone}</td>
            <td>${item ? item.name : 'N/A'}</td>
            <td>${formatDate(rental.startDate)}</td>
            <td>${rental.duration} ${getPricingTypeText(rental.pricingType)}</td>
            <td>Rp ${rental.totalCost.toLocaleString()}</td>
            <td><span class="status-badge ${rental.status.toLowerCase()}">${rental.status}</span></td>
            <td>
                <button class="btn-edit" onclick="editRental(${rental.id})">Edit</button>
                <button class="btn-delete" onclick="deleteRental(${rental.id})">Hapus</button>
                <button class="btn-secondary" onclick="showInvoice(${rental.id})">Invoice</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function getPricingTypeText(type) {
    const types = {
        'hourly': 'jam',
        'daily': 'hari',
        'weekly': 'minggu',
        'monthly': 'bulan',
        'custom': 'unit'
    };
    return types[type] || 'hari';
}

function showAddRentalModal() {
    editingRentalId = null;
    const form = document.getElementById('addRentalForm');
    if (form) form.reset();
    
    populateAvailableItems();
    
    const modalTitle = document.querySelector('#addRentalModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Tambah Penyewaan Baru';
    
    const modal = document.getElementById('addRentalModal');
    if (modal) modal.style.display = 'block';
}

function populateAvailableItems() {
    const select = document.getElementById('rentalItem');
    if (!select) return;
    
    select.innerHTML = '<option value="">Pilih Barang</option>';
    
    const availableItems = items.filter(item => item.status === 'available');
    availableItems.forEach(item => {
        const option = document.createElement('option');
        option.value = item.id;
        option.textContent = `${item.name} (${item.code})`;
        select.appendChild(option);
    });
}

function updatePricingOptions() {
    const itemSelect = document.getElementById('rentalItem');
    const pricingSelect = document.getElementById('pricingOption');
    
    if (!itemSelect || !pricingSelect) return;
    
    const itemId = parseInt(itemSelect.value);
    const item = items.find(i => i.id === itemId);
    
    pricingSelect.innerHTML = '<option value="">Pilih Opsi Harga</option>';
    
    if (item && item.pricingOptions) {
        item.pricingOptions.forEach((option, index) => {
            const optionElement = document.createElement('option');
            optionElement.value = index;
            optionElement.textContent = `${option.name} - Rp ${option.price.toLocaleString()}`;
            optionElement.dataset.price = option.price;
            optionElement.dataset.type = option.type;
            pricingSelect.appendChild(optionElement);
        });
    }
    
    calculateRentalCost();
}

function calculateRentalCost() {
    const itemSelect = document.getElementById('rentalItem');
    const pricingSelect = document.getElementById('pricingOption');
    const durationInput = document.getElementById('duration');
    const totalCostInput = document.getElementById('totalCost');
    const customPriceInput = document.getElementById('customPrice');
    
    if (!itemSelect || !pricingSelect || !durationInput || !totalCostInput) return;
    
    const duration = parseInt(durationInput.value) || 0;
    const customPrice = parseInt(customPriceInput.value) || 0;
    
    if (customPrice > 0) {
        totalCostInput.value = customPrice;
        return;
    }
    
    const selectedOption = pricingSelect.options[pricingSelect.selectedIndex];
    
    if (selectedOption && selectedOption.dataset.price) {
        const price = parseInt(selectedOption.dataset.price);
        const totalCost = price * duration;
        totalCostInput.value = totalCost;
    }
}

function handleAddRental(e) {
    e.preventDefault();
    
    const customerName = document.getElementById('customerName');
    const customerPhone = document.getElementById('customerPhone');
    const rentalItem = document.getElementById('rentalItem');
    const pricingOption = document.getElementById('pricingOption');
    const startDate = document.getElementById('startDate');
    const duration = document.getElementById('duration');
    const totalCost = document.getElementById('totalCost');
    
    if (!customerName || !customerPhone || !rentalItem || !pricingOption || !startDate || !duration || !totalCost) {
        alert('Form elements not found!');
        return;
    }
    
    const itemId = parseInt(rentalItem.value);
    const pricingIndex = parseInt(pricingOption.value);
    const item = items.find(i => i.id === itemId);
    const selectedPricing = item.pricingOptions[pricingIndex];
    
    const invoiceNumber = generateInvoiceNumber();
    
    const formData = {
        customerId: customerName.value,
        customerPhone: customerPhone.value,
        itemId: itemId,
        startDate: startDate.value,
        duration: parseInt(duration.value),
        pricingType: selectedPricing.type,
        totalCost: parseInt(totalCost.value),
        status: 'AKTIF',
        invoiceNumber: invoiceNumber
    };
    
    if (editingRentalId) {
        const rentalIndex = rentals.findIndex(r => r.id === editingRentalId);
        if (rentalIndex !== -1) {
            rentals[rentalIndex] = { ...rentals[rentalIndex], ...formData };
            showNotification('Penyewaan berhasil diperbarui!', 'success');
        }
    } else {
        const newRental = {
            id: Date.now(),
            ...formData
        };
        rentals.push(newRental);
        
        // Update item status to rented
        const itemIndex = items.findIndex(i => i.id === itemId);
        if (itemIndex !== -1) {
            items[itemIndex].status = 'rented';
        }
        
        showNotification('Penyewaan berhasil ditambahkan!', 'success');
        
        // Show invoice
        setTimeout(() => {
            showInvoice(newRental.id);
        }, 500);
    }
    
    saveRentals();
    saveItems();
    displayRentals();
    displayItems();
    updateDashboard();
    closeModal('addRentalModal');
}

function generateInvoiceNumber() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const time = String(now.getTime()).slice(-4);
    
    return `INV-${year}${month}${day}-${time}`;
}

function editRental(id) {
    const rental = rentals.find(r => r.id === id);
    if (!rental) return;
    
    editingRentalId = id;
    
    const customerName = document.getElementById('customerName');
    const customerPhone = document.getElementById('customerPhone');
    const startDate = document.getElementById('startDate');
    const duration = document.getElementById('duration');
    const totalCost = document.getElementById('totalCost');
    
    if (customerName) customerName.value = rental.customerId;
    if (customerPhone) customerPhone.value = rental.customerPhone;
    if (startDate) startDate.value = rental.startDate;
    if (duration) duration.value = rental.duration;
    if (totalCost) totalCost.value = rental.totalCost;
    
    populateAvailableItems();
    const rentalItem = document.getElementById('rentalItem');
    if (rentalItem) {
        rentalItem.value = rental.itemId;
        updatePricingOptions();
    }
    
    const modalTitle = document.querySelector('#addRentalModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Edit Penyewaan';
    
    const modal = document.getElementById('addRentalModal');
    if (modal) modal.style.display = 'block';
}

function deleteRental(id) {
    if (confirm('Apakah Anda yakin ingin menghapus penyewaan ini?')) {
        const rental = rentals.find(r => r.id === id);
        if (rental) {
            // Update item status back to available
            const itemIndex = items.findIndex(i => i.id === rental.itemId);
            if (itemIndex !== -1) {
                items[itemIndex].status = 'available';
            }
        }
        
        rentals = rentals.filter(rental => rental.id !== id);
        saveRentals();
        saveItems();
        displayRentals();
        displayItems();
        updateDashboard();
        showNotification('Penyewaan berhasil dihapus!', 'success');
    }
}

// Returns Management
function displayReturns() {
    const tbody = document.getElementById('returnsTableBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    
    returns.forEach(returnItem => {
        const rental = rentals.find(r => r.id === returnItem.rentalId);
        const item = rental ? items.find(i => i.id === rental.itemId) : null;
        
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>#${returnItem.rentalId}</td>
            <td>${rental ? rental.customerId : 'N/A'}</td>
            <td>${item ? item.name : 'N/A'}</td>
            <td>${formatDate(returnItem.returnDate)}</td>
            <td>${returnItem.condition}</td>
            <td>${returnItem.discountPercentage}%</td>
            <td>Rp ${returnItem.finalCost.toLocaleString()}</td>
            <td>
                <button class="btn-edit" onclick="editReturn(${returnItem.id})">Edit</button>
                <button class="btn-delete" onclick="deleteReturn(${returnItem.id})">Hapus</button>
            </td>
        `;
        tbody.appendChild(row);
    });
}

function showAddReturnModal() {
    editingReturnId = null;
    const form = document.getElementById('addReturnForm');
    if (form) form.reset();
    
    populateActiveRentals();
    
    const modalTitle = document.querySelector('#addReturnModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Proses Pengembalian';
    
    const modal = document.getElementById('addReturnModal');
    if (modal) modal.style.display = 'block';
}

function populateActiveRentals() {
    const select = document.getElementById('returnRental');
    if (!select) return;
    
    select.innerHTML = '<option value="">Pilih Penyewaan</option>';
    
    const activeRentals = rentals.filter(rental => rental.status === 'AKTIF');
    activeRentals.forEach(rental => {
        const item = items.find(i => i.id === rental.itemId);
        const option = document.createElement('option');
        option.value = rental.id;
        option.textContent = `#${rental.id} - ${rental.customerId} - ${item ? item.name : 'N/A'}`;
        option.dataset.cost = rental.totalCost;
        select.appendChild(option);
    });
}

function calculateReturnCost() {
    const rentalSelect = document.getElementById('returnRental');
    const discountInput = document.getElementById('discount');
    const finalCostInput = document.getElementById('finalCost');
    
    if (!rentalSelect || !discountInput || !finalCostInput) return;
    
    const discount = parseInt(discountInput.value) || 0;
    const selectedOption = rentalSelect.options[rentalSelect.selectedIndex];
    
    if (selectedOption && selectedOption.dataset.cost) {
        const originalCost = parseInt(selectedOption.dataset.cost);
        const finalCost = originalCost - (originalCost * discount / 100);
        finalCostInput.value = finalCost;
    }
}

function handleAddReturn(e) {
    e.preventDefault();
    
    const returnRental = document.getElementById('returnRental');
    const returnDate = document.getElementById('returnDate');
    const returnCondition = document.getElementById('returnCondition');
    const discount = document.getElementById('discount');
    const finalCost = document.getElementById('finalCost');
    
    if (!returnRental || !returnDate || !returnCondition || !discount || !finalCost) {
        alert('Form elements not found!');
        return;
    }
    
    const rentalId = parseInt(returnRental.value);
    const formData = {
        rentalId: rentalId,
        returnDate: returnDate.value,
        condition: returnCondition.value,
        discountPercentage: parseInt(discount.value) || 0,
        finalCost: parseInt(finalCost.value)
    };
    
    if (editingReturnId) {
        const returnIndex = returns.findIndex(r => r.id === editingReturnId);
        if (returnIndex !== -1) {
            returns[returnIndex] = { ...returns[returnIndex], ...formData };
            showNotification('Pengembalian berhasil diperbarui!', 'success');
        }
    } else {
        const newReturn = {
            id: Date.now(),
            ...formData
        };
        returns.push(newReturn);
        
        // Update rental status to completed
        const rentalIndex = rentals.findIndex(r => r.id === rentalId);
        if (rentalIndex !== -1) {
            rentals[rentalIndex].status = 'SELESAI';
            
            // Update item status back to available
            const itemIndex = items.findIndex(i => i.id === rentals[rentalIndex].itemId);
            if (itemIndex !== -1) {
                items[itemIndex].status = 'available';
            }
        }
        
        showNotification('Pengembalian berhasil diproses!', 'success');
    }
    
    saveReturns();
    saveRentals();
    saveItems();
    displayReturns();
    displayRentals();
    displayItems();
    updateDashboard();
    closeModal('addReturnModal');
}

function editReturn(id) {
    const returnItem = returns.find(r => r.id === id);
    if (!returnItem) return;
    
    editingReturnId = id;
    
    const returnDate = document.getElementById('returnDate');
    const returnCondition = document.getElementById('returnCondition');
    const discount = document.getElementById('discount');
    const finalCost = document.getElementById('finalCost');
    
    if (returnDate) returnDate.value = returnItem.returnDate;
    if (returnCondition) returnCondition.value = returnItem.condition;
    if (discount) discount.value = returnItem.discountPercentage;
    if (finalCost) finalCost.value = returnItem.finalCost;
    
    populateActiveRentals();
    const returnRental = document.getElementById('returnRental');
    if (returnRental) returnRental.value = returnItem.rentalId;
    
    const modalTitle = document.querySelector('#addReturnModal .modal-header h3');
    if (modalTitle) modalTitle.textContent = 'Edit Pengembalian';
    
    const modal = document.getElementById('addReturnModal');
    if (modal) modal.style.display = 'block';
}

function deleteReturn(id) {
    if (confirm('Apakah Anda yakin ingin menghapus pengembalian ini?')) {
        returns = returns.filter(returnItem => returnItem.id !== id);
        saveReturns();
        displayReturns();
        updateDashboard();
        showNotification('Pengembalian berhasil dihapus!', 'success');
    }
}

// Barcode Scanner
function showBarcodeScanner() {
    const modal = document.getElementById('barcodeScannerModal');
    if (modal) modal.style.display = 'block';
    
    const input = document.getElementById('barcodeInput');
    if (input) input.focus();
}

function processBarcodeReturn() {
    const barcodeInput = document.getElementById('barcodeInput');
    if (!barcodeInput) return;
    
    const barcode = barcodeInput.value.trim();
    if (!barcode) {
        alert('Silakan masukkan kode barcode!');
        return;
    }
    
    // Find item by code
    const item = items.find(i => i.code === barcode);
    if (!item) {
        alert('Barang dengan kode barcode tersebut tidak ditemukan!');
        return;
    }
    
    // Find active rental for this item
    const activeRental = rentals.find(r => r.itemId === item.id && r.status === 'AKTIF');
    if (!activeRental) {
        alert('Tidak ada penyewaan aktif untuk barang ini!');
        return;
    }
    
    // Close barcode scanner and open return modal
    closeModal('barcodeScannerModal');
    showAddReturnModal();
    
    // Pre-select the rental
    setTimeout(() => {
        const returnRental = document.getElementById('returnRental');
        if (returnRental) {
            returnRental.value = activeRental.id;
            calculateReturnCost();
        }
        
        // Set today's date
        const returnDate = document.getElementById('returnDate');
        if (returnDate) {
            returnDate.value = new Date().toISOString().split('T')[0];
        }
    }, 100);
}

// Invoice Management
function showInvoice(rentalId) {
    const rental = rentals.find(r => r.id === rentalId);
    if (!rental) return;
    
    const item = items.find(i => i.id === rental.itemId);
    const pricingOption = item ? item.pricingOptions.find(p => p.type === rental.pricingType) : null;
    
    const invoiceContent = document.getElementById('invoiceContent');
    if (!invoiceContent) return;
    
    const currentDate = new Date().toLocaleDateString('id-ID');
    
    invoiceContent.innerHTML = `
        <div class="invoice-header">
            <div class="company-info">
                <h2>🏪 Sistem Manajemen Rental</h2>
                <p>Jl. Contoh No. 123, Jakarta</p>
                <p>Telp: (021) 1234-5678</p>
                <p>Email: info@rental.com</p>
            </div>
            <div class="invoice-info">
                <h3>INVOICE</h3>
                <p><strong>No. Invoice:</strong> ${rental.invoiceNumber}</p>
                <p><strong>Tanggal:</strong> ${currentDate}</p>
                <p><strong>Status:</strong> ${rental.status}</p>
            </div>
        </div>
        
        <div class="customer-info">
            <h4>Informasi Pelanggan:</h4>
            <p><strong>Nama:</strong> ${rental.customerId}</p>
            <p><strong>Telepon:</strong> ${rental.customerPhone}</p>
        </div>
        
        <div class="rental-details">
            <h4>Detail Penyewaan:</h4>
            <table class="invoice-table">
                <thead>
                    <tr>
                        <th>Barang</th>
                        <th>Kode</th>
                        <th>Tanggal Mulai</th>
                        <th>Durasi</th>
                        <th>Harga Satuan</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>${item ? item.name : 'N/A'}</td>
                        <td>${item ? item.code : 'N/A'}</td>
                        <td>${formatDate(rental.startDate)}</td>
                        <td>${rental.duration} ${getPricingTypeText(rental.pricingType)}</td>
                        <td>Rp ${pricingOption ? pricingOption.price.toLocaleString() : '0'}</td>
                        <td>Rp ${rental.totalCost.toLocaleString()}</td>
                    </tr>
                </tbody>
            </table>
        </div>
        
        <div class="invoice-total">
            <div class="total-row">
                <span>Subtotal:</span>
                <span>Rp ${rental.totalCost.toLocaleString()}</span>
            </div>
            <div class="total-row">
                <span>PPN (11%):</span>
                <span>Rp ${Math.round(rental.totalCost * 0.11).toLocaleString()}</span>
            </div>
            <div class="total-row final-total">
                <span><strong>Total:</strong></span>
                <span><strong>Rp ${Math.round(rental.totalCost * 1.11).toLocaleString()}</strong></span>
            </div>
        </div>
        
        <div class="invoice-footer">
            <p><strong>Syarat dan Ketentuan:</strong></p>
            <ul>
                <li>Barang harus dikembalikan dalam kondisi baik</li>
                <li>Keterlambatan pengembalian dikenakan denda 10% per hari</li>
                <li>Kerusakan barang menjadi tanggung jawab penyewa</li>
                <li>Invoice ini sah tanpa tanda tangan</li>
            </ul>
        </div>
    `;
    
    const modal = document.getElementById('invoiceModal');
    if (modal) modal.style.display = 'block';
}

function printInvoice() {
    const invoiceContent = document.getElementById('invoiceContent');
    if (!invoiceContent) return;
    
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
        <html>
            <head>
                <title>Invoice</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 20px; }
                    .invoice-header { display: flex; justify-content: space-between; margin-bottom: 30px; }
                    .invoice-table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                    .invoice-table th, .invoice-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                    .invoice-table th { background-color: #f2f2f2; }
                    .invoice-total { margin-top: 20px; text-align: right; }
                    .total-row { margin: 5px 0; }
                    .final-total { border-top: 2px solid #333; padding-top: 10px; }
                    .invoice-footer { margin-top: 30px; }
                    .invoice-footer ul { margin: 10px 0; padding-left: 20px; }
                </style>
            </head>
            <body>
                ${invoiceContent.innerHTML}
            </body>
        </html>
    `);
    printWindow.document.close();
    printWindow.print();
}

function downloadInvoice() {
    // Simple implementation - in real app, you'd use a PDF library
    alert('Fitur download PDF akan segera tersedia!');
}

// Modal functions
function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) modal.style.display = 'none';
}

// Utility functions
function saveCategories() {
    localStorage.setItem('rentalCategories', JSON.stringify(categories));
}

function saveItems() {
    localStorage.setItem('rentalItems', JSON.stringify(items));
}

function saveRentals() {
    localStorage.setItem('rentalRentals', JSON.stringify(rentals));
}

function saveReturns() {
    localStorage.setItem('rentalReturns', JSON.stringify(returns));
}

function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('id-ID');
}

function showNotification(message, type) {
    alert(message);
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    });
}

// Make functions globally available
window.showSection = showSection;
window.handleLogin = handleLogin;
window.logout = logout;
window.showAddCategoryModal = showAddCategoryModal;
window.showAddItemModal = showAddItemModal;
window.showAddRentalModal = showAddRentalModal;
window.showAddReturnModal = showAddReturnModal;
window.showBarcodeScanner = showBarcodeScanner;
window.editCategory = editCategory;
window.deleteCategory = deleteCategory;
window.editItem = editItem;
window.deleteItem = deleteItem;
window.editRental = editRental;
window.deleteRental = deleteRental;
window.editReturn = editReturn;
window.deleteReturn = deleteReturn;
window.closeModal = closeModal;
window.addPricingOption = addPricingOption;
window.removePricingOption = removePricingOption;
window.updatePricingOptions = updatePricingOptions;
window.processBarcodeReturn = processBarcodeReturn;
window.showInvoice = showInvoice;
window.printInvoice = printInvoice;
window.downloadInvoice = downloadInvoice;
